
import warnings
warnings.filterwarnings('ignore')

import matplotlib as mpl
import matplotlib.pyplot as plt
import met_brewer
import pandas as pd
import numpy as np
import random
import re
import seaborn as sns
import sys
import upsetplot

import statsmodels.api as sm
import statsmodels.formula.api as smf
import statsmodels.stats.multitest as smt

from Bio import SeqIO
from Bio.Seq import Seq
from scipy.stats import fisher_exact
from scipy.stats import mannwhitneyu
from scipy.stats import wilcoxon
from scipy.stats import pearsonr

%matplotlib inline
%config InlineBackend.figure_format = 'svg'
mpl.rcParams['figure.autolayout'] = False

PAPER_PRESET = {"style": "ticks", "font": "Helvetica", "context": "paper", 
                "rc": {"font.size":10,"axes.titlesize":10,
                       "axes.labelsize":10, 'axes.linewidth':0.5,
                       "legend.fontsize":10, "xtick.labelsize":10,
                       "ytick.labelsize":10, "xtick.major.size": 3.0,
                       "ytick.major.size": 3.0, "axes.edgecolor": "black",
                       "xtick.major.pad": 3.0, "ytick.major.pad": 3.0}}
PAPER_FONTSIZE = 10

sns.set(**PAPER_PRESET)
fontsize = PAPER_FONTSIZE

chip_seqs_f = "../../../../data/external/chip/TBX5_ChIP_peaks.centered.fasta"
genre_seqs_f = "../../../../data/external/chip/TBX5_ChIP.genre_background.fasta"
closest_tss_f = "../../../../data/external/chip/TBX5_ChIP_peaks.closest_pc_tss.txt"
upbm_f = "../../../../data/processed/pbms/TBX5kfit_dat.csv"

joung_ref_f = "../../../../data/external/joung_files/GE.TFORF1983-TBX5_vs_cellHarmony-Reference.txt"
joung_alt_f = "../../../../data/external/joung_files/GE.TFORF1982-TBX5_vs_cellHarmony-Reference.txt"

motif = "AGGTGT"
motif_rc = "ACACCT"

sp_motif = "ACGTGT"
sp_motif_rc = "ACACGT"

upbm = pd.read_table(upbm_f, sep=",")
upbm.head()

names = []
seqs = []

for record in SeqIO.parse(chip_seqs_f, "fasta"):
    names.append(record.id)
    seqs.append(str(record.seq))

chip = pd.DataFrame([names, seqs]).T
chip.columns = ["id", "seq"]

chip.id.iloc[0]

# parse id
chip["sr"] = chip["id"].str.extract(r'ID=([A-Z0-9]*)', expand=True)[0]
chip["name"] = chip["id"].str.extract(r'Name=([A-Za-z0-9\%\@\(\)]*);', expand=True)[0]
chip["name"] = chip["name"].str.replace("%20", " ")
chip["title"] = chip["id"].str.extract(r'Title=([A-Za-z0-9\%\:\-\.]*);', expand=True)[0]
chip["title"] = chip["title"].str.replace(r"%20", " ")
chip["title"] = chip["title"].str.replace(r"%3B", " ")
chip["cell"] = chip["id"].str.extract(r'Cell\%20group=([A-Za-z0-9\%\:\-\.]*);', expand=True)[0]
chip["cell"] = chip["cell"].str.replace(r"%20", " ")
chip["source_name"] = chip["id"].str.extract(r'source_name=([A-Za-z0-9\%\:\-\.\(\)]*);', expand=True)[0]
chip["source_name"] = chip["source_name"].str.replace(r"%20", " ")
chip["cell_type"] = chip["id"].str.extract(r'cell\%20type=([A-Za-z0-9\%\:\-\.]*);', expand=True)[0]
chip["cell_type"] = chip["cell_type"].str.replace(r"%20", " ")
chip["stage"] = chip["id"].str.extract(r'tage=([A-Za-z0-9\%\:\-\.]*);', expand=True)[0]
chip["stage"] = chip["stage"].str.replace(r"%20", " ")
chip["rep"] = chip["id"].str.extract(r'replicate=([0-9]*);', expand=True)[0]
chip["antibody"] = chip["id"].str.extract(r'antibody=([A-Za-z0-9\%\:\-\.\,\(\)]*);', expand=True)[0]
chip["antibody"] = chip["antibody"].str.replace(r"%20", " ")
chip["locs"] = chip["id"].str.extract(r'\;\:\:(chr[0-9XY]*\:\d*\-\d*)*', expand=True)[0]
chip[["sr", "title", "cell", "cell_type", "source_name", "antibody"]].drop_duplicates()

names = []
seqs = []

for record in SeqIO.parse(genre_seqs_f, "fasta"):
    names.append(record.id)
    seqs.append(str(record.seq))

genre = pd.DataFrame([names, seqs]).T
genre.columns = ["id", "seq"]
genre.head()

closest_tss = pd.read_table(closest_tss_f, header=None)
closest_tss.columns = ["chr", "start", "end", "id", "len", "strand", "score", "x", "chr_tss", "start_tss",
                       "end_tss", "tx_tss", "score_tss", "strand_tss", "dist"]
closest_tss.head()

joung_ref = pd.read_table(joung_ref_f, delim_whitespace=True)
print(len(joung_ref))
joung_alt = pd.read_table(joung_alt_f, delim_whitespace=True)
print(len(joung_alt))
joung_ref.head()

studies_to_use = ["SRX1815017", "SRX2023713", "SRX9284026", "SRX2023721", "SRX9284039", "SRX2023705"]
chip_filt = chip[chip["sr"].isin(studies_to_use)]
len(chip_filt)

chip_filt["peak_length"] = chip_filt.seq.str.len()
chip_filt.peak_length.min()

centered_peak_len = 200
int(centered_peak_len/2)

def get_center_seq(row):
    seq_len = row.peak_length
    midpoint = int(np.floor(seq_len/2))
    centered_seq = row.seq[midpoint-int(centered_peak_len/2):midpoint+int(centered_peak_len/2)]
    return centered_seq

chip_filt["seq_cent"] = chip_filt.apply(get_center_seq, axis=1)
chip_filt["center_length"] = chip_filt.seq_cent.str.len()
chip_filt.head()

def get_kmer_ocurrences(row, kmer, kmer_rc):
    kmer_oc = [m.start() for m in re.finditer('(?=%s)' % kmer, row.seq_cent)]
    kmer_rc_oc = [m.start() for m in re.finditer('(?=%s)' % kmer_rc, row.seq_cent)]
    
    kmer_arr = np.zeros(centered_peak_len)
    for oc in kmer_oc:
        kmer_arr[oc:oc+len(kmer)] += 1
    for oc in kmer_rc_oc:
        kmer_arr[oc:oc+len(kmer_rc)] += 1
    
    return kmer_arr

chip_filt["motif_arr"] = chip_filt.apply(get_kmer_ocurrences, kmer=motif, kmer_rc=motif_rc, axis=1)
chip_filt["sp_motif_arr"] = chip_filt.apply(get_kmer_ocurrences, kmer=sp_motif, kmer_rc=sp_motif_rc, axis=1)
chip_filt["hd_arr"] = chip_filt.apply(get_kmer_ocurrences, kmer="TAATTA", kmer_rc="TAATTA", axis=1)

m = np.sum(np.array(chip_filt["motif_arr"].tolist()), axis=0)
sm = np.sum(np.array(chip_filt["sp_motif_arr"].tolist()), axis=0)
h = np.sum(np.array(chip_filt["hd_arr"].tolist()), axis=0)

def moving_average(x, w):
    return np.convolve(x, np.ones(w), 'valid') / w

m_av = moving_average(m, 8)
sm_av = moving_average(sm, 8)
h_av = moving_average(h, 8)

fig = plt.figure(figsize=(3, 2))

plt.plot(m_av, color="black", label=motif)
plt.plot(sm_av, color="blue", label=sp_motif)
plt.plot(h_av, color="grey", label="TAATTA")

plt.xlabel("nucleotide position in peak")
plt.ylabel("k-mer density")
plt.title("significant TBX5 ChIP-seq peaks")
#plt.ylim((-0.5, 22))

plt.legend(loc=2)

genre["peak_length"] = genre.seq.str.len()
genre.peak_length.value_counts()

# peaks already centered
genre["seq_cent"] = genre["seq"]

genre["motif_arr"] = genre.apply(get_kmer_ocurrences, kmer=motif, kmer_rc=motif_rc, axis=1)
genre["sp_motif_arr"] = genre.apply(get_kmer_ocurrences, kmer=sp_motif, kmer_rc=sp_motif_rc, axis=1)
genre["hd_arr"] = genre.apply(get_kmer_ocurrences, kmer="TAATTA", kmer_rc="TAATTA", axis=1)

m_g = np.sum(np.array(genre["motif_arr"].tolist()), axis=0)
sm_g = np.sum(np.array(genre["sp_motif_arr"].tolist()), axis=0)
h_g = np.sum(np.array(genre["hd_arr"].tolist()), axis=0)

m_g_av = moving_average(m_g, 8)
sm_g_av = moving_average(sm_g, 8)
h_g_av = moving_average(h_g, 8)

fig, axarr = plt.subplots(1, 3, figsize=(6, 2.5))

i = 0
for fg_arr, bg_arr, kmer in zip([m_av, sm_av, h_av], [m_g_av, sm_g_av, h_g_av], 
                                 [motif, sp_motif, "TAATTA"]):
    
    ax = axarr[i]
    
    ax.plot(fg_arr, label="%s foreground" % kmer, color="black")
    ax.plot(bg_arr, linestyle="dashed", label="%s background" % kmer, color="grey")

    ax.set_xlabel("nucleotide position\nin centered peak")
    ax.set_ylabel("average k-mer density")
    ax.set_title(kmer)
    i += 1
    
plt.tight_layout()
fig.savefig("../../../../figures/TBX5_chip_density.pdf", dpi="figure", bbox_inches="tight")

def has_motif(row, col):
    arr = row[col]
    arr_sum = np.sum(arr)
    if arr_sum > 0:
        return 1
    else:
        return 0
    
chip_filt["has_motif"] = chip_filt.apply(has_motif, col="motif_arr", axis=1)
chip_filt["has_sp_motif"] = chip_filt.apply(has_motif, col="sp_motif_arr", axis=1)
chip_filt["has_hd"] = chip_filt.apply(has_motif, col="hd_arr", axis=1)

genre["has_motif"] = genre.apply(has_motif, col="motif_arr", axis=1)
genre["has_sp_motif"] = genre.apply(has_motif, col="sp_motif_arr", axis=1)
genre["has_hd"] = genre.apply(has_motif, col="hd_arr", axis=1)

motif_tab = np.zeros((2, 2))
sp_motif_tab = np.zeros((2, 2))
hd_tab = np.zeros((2, 2))  

n_m_fore = len(chip_filt[chip_filt["has_motif"] == 1])
n_nom_fore = len(chip_filt[chip_filt["has_motif"] == 0])

n_m_bg = len(genre[genre["has_motif"] == 1])
n_nom_bg = len(genre[genre["has_motif"] == 0])

motif_tab[0, 0] = n_m_fore
motif_tab[0, 1] = n_nom_fore
motif_tab[1, 0] = n_m_bg
motif_tab[1, 1] = n_nom_bg

fisher_exact(motif_tab)

motif_tab

n_m_fore = len(chip_filt[chip_filt["has_sp_motif"] == 1])
n_nom_fore = len(chip_filt[chip_filt["has_sp_motif"] == 0])

n_m_bg = len(genre[genre["has_sp_motif"] == 1])
n_nom_bg = len(genre[genre["has_sp_motif"] == 0])

sp_motif_tab[0, 0] = n_m_fore
sp_motif_tab[0, 1] = n_nom_fore
sp_motif_tab[1, 0] = n_m_bg
sp_motif_tab[1, 1] = n_nom_bg

fisher_exact(sp_motif_tab)

sp_motif_tab

n_m_fore = len(chip_filt[chip_filt["has_hd"] == 1])
n_nom_fore = len(chip_filt[chip_filt["has_hd"] == 0])

n_m_bg = len(genre[genre["has_hd"] == 1])
n_nom_bg = len(genre[genre["has_hd"] == 0])

hd_tab[0, 0] = n_m_fore
hd_tab[0, 1] = n_nom_fore
hd_tab[1, 0] = n_m_bg
hd_tab[1, 1] = n_nom_bg

fisher_exact(hd_tab)

hd_tab

motif_df = pd.DataFrame(motif_tab)
motif_df.index = ["foreground", "background"]
motif_df.columns = ["%s" % motif, "no %s" % motif]
motif_df.reset_index(inplace=True)
motif_m = pd.melt(motif_df, id_vars="index")

sp_motif_df = pd.DataFrame(sp_motif_tab)
sp_motif_df.index = ["foreground", "background"]
sp_motif_df.columns = ["%s" % sp_motif, "no %s" % sp_motif]
sp_motif_df.reset_index(inplace=True)
sp_motif_m = pd.melt(sp_motif_df, id_vars="index")
motif_m = motif_m.append(sp_motif_m)

hd_motif_df = pd.DataFrame(hd_tab)
hd_motif_df.index = ["foreground", "background"]
hd_motif_df.columns = ["TAATTA", "no TAATTA"]
hd_motif_df.reset_index(inplace=True)
hd_motif_m = pd.melt(hd_motif_df, id_vars="index")
motif_m = motif_m.append(hd_motif_m)

motif_m["perc"] = motif_m["value"]/len(chip_filt)

fig = plt.figure(figsize=(2.5, 2))

pal = {"foreground": sns.color_palette("Set2")[0], "background": "lightgrey"}

ax = sns.barplot(data=motif_m[~motif_m["variable"].str.startswith("no")],
                 x="variable", y="perc", hue="index", palette=pal)
plt.legend(loc=2, bbox_to_anchor=(1.01, 1))

ax.set_ylabel("% of peaks with k-mer")
ax.set_ylim((0, 0.25))
ax.set_title("k-mer enrichment in TBX5 ChIP peaks")

# annotate p-values
i = 0
for tab, y in zip([motif_tab, sp_motif_tab, hd_tab], [0.22, 0.07, 0.05]):
    pval = fisher_exact(tab)
    
    ax.plot([i-0.2, i+0.2], [y, y], color="black", linewidth=1)
    
    p = fisher_exact(tab)[1]
    if p < 1e-6:
        s = "{:.1e}".format(p)
    else:
        s = np.round(p, 2)
    
    ax.text(i, y, s, ha="center", va="bottom", fontsize=8)
    i += 1

fig = plt.figure(figsize=(3, 3))

ax = sns.distplot(joung_ref["LogFold"], label="reference TBX5 (n=%s)" % len(joung_ref), color="grey", hist=False)
sns.distplot(joung_alt["LogFold"], label="TBX5-2 (n=%s)" % len(joung_alt), color="black", hist=False, ax=ax)
ax.set_xlabel("LogFC GE vs. Controls")
ax.set_ylabel("Density")
ax.set_title("Significant Genes Only")

plt.

closest_tss["id"] = closest_tss["id"] + "::" + closest_tss["chr"] + ":" + closest_tss["start"].astype(str) + "-" + closest_tss["end"].astype(str)
closest_tss.id.iloc[0]

chip_filt = chip_filt.merge(closest_tss[["id", "tx_tss", "dist"]], on="id", how="left")

chip_filt["gene_name"] = chip_filt["tx_tss"].str[:-4]

chip_filt["joung_ref"] = chip_filt["gene_name"].isin(joung_ref["Symbol"])
chip_filt["joung_alt"] = chip_filt["gene_name"].isin(joung_alt["Symbol"])

def classify_gene(row):
    if row.joung_ref and row.joung_alt:
        return "both"
    elif row.joung_ref:
        return "ref. only"
    elif row.joung_alt:
        return "alt. only"
    else:
        return "neither"
    
chip_filt["joung_status"] = chip_filt.apply(classify_gene, axis=1)
chip_filt["joung_status"].value_counts()

chip_filt_m = pd.melt(chip_filt, id_vars=["id", "joung_status", "gene_name"], value_vars=["has_motif",
                                                                                          "has_sp_motif", 
                                                                                          "has_hd"])
chip_filt_grp = chip_filt_m.groupby(["joung_status", "variable"])["value"].agg("sum").reset_index()
chip_filt_tot = chip_filt.groupby(["joung_status"])["id"].agg("count").reset_index()
chip_filt_grp = chip_filt_grp.merge(chip_filt_tot, on="joung_status")
chip_filt_grp["perc"] = (chip_filt_grp["value"]/chip_filt_grp["id"])*100
chip_filt_grp

sns.barplot(data=chip_filt_grp, x="joung_status", y="perc", hue="variable")
